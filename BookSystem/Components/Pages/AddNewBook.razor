@page "/AddNewBook"

@using DomainModels
@using MudBlazor
@using System.Runtime.CompilerServices
@inject HttpClient _httpClient
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
</head>
<body>

    <MudLayout>
    <MudPopoverProvider />

    <MudAppBar>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>
    </MudAppBar>

    <MudDrawer Open="true" Anchor="Anchor.Left" Variant="DrawerVariant.Mini" >
        <NavMenu />  <!-- Your sidebar content -->
    </MudDrawer>

    <MudMainContent>
        <div class="main-content">
            <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
                <MudCard Outlined="true">
                    <MudCardContent>
                        <MudTextField @bind-Value="book.BookTitle" Label="(Required) Book Title" HelperText="(Required) Enter the book title" Variant="Variant.Outlined" />
                        <MudTextField @bind-Value="book.BookPages" Label="(Required) Number of Pages" HelperText="(Required) Enter the number of pages" Variant="Variant.Outlined" />
                        <MudTextField @bind-Value="book.BookSummary" Label="(Optional) Book Summary" HelperText="(Optional) Enter a summary" Variant="Variant.Outlined" />

                        <!-- Select genre from predefined options -->
                        <MudSelect T="string" Label="Select Genre" @bind-Value="selectedGenre">
                            @if (predefinedGenres.Any())
                            {
                                @foreach (var genre in predefinedGenres)
                                {
                                    <MudSelectItem T="string" Value="@genre">@genre</MudSelectItem>
                                        <MudSelectItem T="string" Value="@("standard single")">standard single</MudSelectItem>
                                        <MudSelectItem T="string" Value="@("standard double")">standard double</MudSelectItem>
                                }
                            }
                            else
                            {
                                <MudSelectItem T="string">Loading genres...</MudSelectItem>
                            }
                        </MudSelect>

                        <InputFile OnChange="HandleImageUpload" />
                        @if (imagePreview != null)
                        {
                            <img src="@imagePreview" alt="Image Preview" width="200" />
                        }
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PostBookToDB">Add Book</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudContainer>
        </div>
    </MudMainContent>

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
</MudLayout>

<style>
   

    /* Main content area */
    .main-content {
        display: flex;
        justify-content: flex-end; /* Aligns content to the right */
        padding: 20px; /* Adds some padding to the main content area */
        width: 400px;
        margin: 200px;
    }

    .mud-popover {
        z-index: 1100 !important; /* Ensure the dropdown is above other elements */
    }
</style>
</body>
</html>
@code {
    Book book = new Book();
    private string selectedGenre; // Store the selected genre
    private List<string> predefinedGenres = new List<string>(); // Predefined genres
    private byte[] uploadedImage; // Store uploaded image
    private string imagePreview; // For displaying image preview

    protected override async Task OnInitializedAsync()
    {
        // Simulate loading genres (you can fetch these from your API if needed)
       
        predefinedGenres = new List<string> { "Fiction", "Adventure", "Fantasy" };
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        uploadedImage = memoryStream.ToArray();

        // Show image preview
        imagePreview = $"data:image/jpeg;base64,{Convert.ToBase64String(uploadedImage)}";
    }

    private async Task PostBookToDB()
    {
        // Ensure the selected genre is added to the book object
        book.Genres = new List<Genre> { new Genre { Name = selectedGenre } };
        book.CoverImage = uploadedImage; // Add uploaded image to the book object

        // Post the book to your API
        var response = await _httpClient.PostAsJsonAsync("api/books", book);

        if (response.IsSuccessStatusCode)
        {
            // Handle success (e.g., show a success message, reset form)
            Console.WriteLine("Book added successfully.");
            ResetForm();
        }
        else
        {
            // Handle error
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Error adding book: {errorMessage}");
        }
    }

    private void ResetForm()
    {
        // Optionally reset the form fields
        book = new Book();
        selectedGenre = null;
        imagePreview = null;
        uploadedImage = null;
    }
}
