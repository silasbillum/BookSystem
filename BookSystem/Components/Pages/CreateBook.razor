@page "/create"
@using System.Net.Http
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Opret Ny Bog</PageTitle>

<div class="create-container">
    <h2>Opret Ny Bog</h2>

    <div class="create-form">
        <div class="form-group mb-3">
            <label for="title">Titel</label>
            <input type="text" class="form-control" id="title" @bind="book.BookTitle" />
        </div>

        <div class="form-group mb-3">
            <label for="pages">Antal sider</label>
            <input type="text" class="form-control" id="pages" @bind="book.BookPages" />
        </div>

        <div class="form-group mb-3">
            <label for="summary">Resumé</label>
            <textarea class="form-control" id="summary" rows="3" @bind="book.BookSummary"></textarea>
        </div>

        @* <div class="form-group mb-3">
            <label for="bookType">Bogtype</label>
            <textarea class="form-control" id="bookType" rows="2" @bind="book.BookType"></textarea>
        </div> *@

        @* <div class="form-group mb-3">
            <label for="genres">Genre</label>
            <input type="text" class="form-control" id="genres" placeholder="Genre Navn" @bind="genreName" />
            <button class="btn btn-secondary mt-2" @onclick="AddGenre">Tilføj Genre</button>
        </div> *@

        @* <div>
            <p>Tilføjede Genrer:</p>
            <ul>
                @foreach (var genre in book.Genres)
                {
                    <li>@genre.Name</li>
                }
            </ul>
        </div> *@

        @if (isLoading)
        {
            <div class="mt-3">
                <p>Opretter bog...</p>
            </div>
        }

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3">
                @message
            </div>
        }

        <div class="mt-3">
            <button class="btn btn-primary" @onclick="HandleCreateBook">
                Opret Bog
            </button>
            <button class="btn btn-secondary" @onclick="@(() => NavigationManager.NavigateTo("/"))">
                Tilbage
            </button>
        </div>
        

       
    </div>
</div>

<style>
    .create-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 1rem;
    }

    .create-form {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>

@code {
    private Book book = new Book();
    private string genreName = string.Empty;
    private bool isLoading;
    private string message = "";
    private bool isError;

    private async Task HandleCreateBook()
    {
        Console.WriteLine("HandleCreateBook method was called!"); // Debugging log

        isLoading = true;
        message = "";

        try
        {
            var client = HttpClientFactory.CreateClient();
            Console.WriteLine("HTTP client created."); // Debugging log

            // Send the book object as JSON
            var response = await client.PostAsJsonAsync("https://localhost:7219/api/books", book);

            Console.WriteLine("API call made. Status Code: " + response.StatusCode); // Debugging log

            if (response.IsSuccessStatusCode)
            {
                message = "Bog oprettet succesfuldt!";
                isError = false;
                Console.WriteLine("Book created successfully."); // Debugging log
                await Task.Delay(2000); // Wait 2 seconds
                NavigationManager.NavigateTo("/"); // Navigate back to the homepage
            }
            else
            {
                message = $"Fejl ved oprettelse: {await response.Content.ReadAsStringAsync()}";
                isError = true;
                Console.WriteLine("Error creating book: " + message); // Debugging log
            }
        }
        catch (Exception ex)
        {
            message = $"Der opstod en fejl: {ex.Message}";
            isError = true;
            Console.WriteLine("Exception caught: " + ex.Message); // Debugging log
        }
        finally
        {
            isLoading = false;
        }
    }


    private void AddGenre()
    {
        if (!string.IsNullOrWhiteSpace(genreName))
        {
            book.Genres.Add(new Genre { Name = genreName });
            genreName = string.Empty;
        }
    }

    public class Book
    {
        public int Id { get; set; } = 0;
        public string BookTitle { get; set; } = string.Empty;
        public string BookPages { get; set; } = string.Empty;
        public string BookSummary { get; set; } = string.Empty;
        public string BookType { get; set; } = string.Empty;
        public List<Genre> Genres { get; set; } = new List<Genre>();
    }

    public class Genre
    {
        public int Id { get; set; } = 0;
        public string Name { get; set; } = string.Empty;
    }
}
